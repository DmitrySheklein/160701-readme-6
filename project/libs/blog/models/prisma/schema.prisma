// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostStatus {
  DRAFT
  PUBLIC
}

enum PostType {
  VIDEO
  TEXT
  QUOTE
  LINK
  PHOTO
}

model Post {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  status    PostStatus @default(PUBLIC)
  type      PostType
  authorId  String     @map("author_id")
  tags      Tag[]
  comments  Comment[]
  likes     Like[]

  PostVideo PostVideo[]
  PostLink  PostLink[]
  PostQuote PostQuote[]
  PostPhoto PostPhoto[]
  PostText  PostText[]

  @@map("posts")
}

model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  posts     Post[]

  @@map("tags")
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  message   String

  @@index([postId])
  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("likes")
}

model PostVideo {
  id     String @id @default(uuid())
  title  String
  url    String
  Post   Post?  @relation(fields: [postId], references: [id])
  postId String

  @@map("posts_video")
}

model PostLink {
  id          String  @id @default(uuid())
  url         String
  description String?
  Post        Post?   @relation(fields: [postId], references: [id])
  postId      String

  @@map("posts_link")
}

model PostQuote {
  id     String @id @default(uuid())
  quote  String
  author String
  Post   Post?  @relation(fields: [postId], references: [id])
  postId String

  @@map("posts_quote")
}

model PostPhoto {
  id      String @id @default(uuid())
  imageId String @map("image_id")
  Post    Post?  @relation(fields: [postId], references: [id])
  postId  String

  @@map("posts_photo")
}

model PostText {
  id         String @id @default(uuid())
  title      String
  annotation String
  content    String
  Post       Post?  @relation(fields: [postId], references: [id])
  postId     String

  @@map("posts_text")
}
